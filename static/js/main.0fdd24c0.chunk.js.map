{"version":3,"sources":["components/GoogleMaps/AddMarker.js","components/GoogleMaps/MapContainer.js","components/GoogleMaps/GeoCode.js","App.js","serviceWorker.js","index.js"],"names":["AddMarker","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","props","text","React","Component","MapContainer","style","height","width","lib_default","bootstrapURLKeys","defaultCenter","center","defaultZoom","zoom","coordinates","map","coordinate","AddMarker_AddMarker","lat","latitude","lng","longitude","name","defaultProps","names","GeoCode","console","log","length","chooseName","Math","floor","random","chooseSignX","chooseSignY","randX","randY","push","amount","i","randomLocationGenerator","GoogleMaps_MapContainer","generate","App","GeoCode_GeoCode","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fdd24c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AddMarker.css'\r\n\r\nexport class AddMarker extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className=\"AddMarker\">\r\n\t\t\t\t{this.props.text}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};","import React from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport {AddMarker} from './AddMarker';\r\n\r\nclass MapContainer extends React.Component {\r\n\r\n  static defaultProps = {\r\n    center: {lat: 25, lng: 32},\r\n    zoom: 0\r\n  };\r\n\r\n  /*\r\n\tThe render function:\r\n\t\t-To add more markers for the map, use <AddMarker/>\r\n  */\r\n\r\n\r\n  render() {\r\n    return (\r\n    \t<div style={{ height: '70vh', width: '100%' }}>\r\n       <GoogleMapReact\r\n       \tbootstrapURLKeys={{ key: 'AIzaSyAa8YlFzBtsS8LsfVMlnSmhEM6V2MCRqMo'}}\r\n        defaultCenter={this.props.center}\r\n        defaultZoom={this.props.zoom}\r\n      > \r\n        {\r\n          this.props.coordinates.map(coordinate => {\r\n            return <AddMarker lat={coordinate.latitude} lng={coordinate.longitude} text={coordinate.name}/>;\r\n          })\r\n        }\r\n\r\n      </GoogleMapReact>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapContainer;","import React from 'react';\r\nimport MapContainer from '../GoogleMaps/MapContainer';\r\n\r\nlet coordinates = [];\r\nlet names = ['Rudy', 'Tommy', 'Ian', 'Jose', 'Carlos', 'Maria', 'Tim', 'Erick',\r\n 'Oscar', 'Donald', 'Robert', 'Kenneth', 'Daniel', 'Michelle', 'Andrea', 'Luis',\r\n  'Gabriela', 'Matthew', 'Kimberly', 'Karen', 'Samuel', 'Isaac', 'Stephany', 'Nicole', 'Martha',\r\n  'Rene', 'Darrien', 'Damon', 'Pedro', 'Pablo', 'Alex', 'Alejandro', 'Omar', 'Serena', 'Ronaldo',\r\n  'Sergio', 'Moises', 'Benjamin', 'Jeffrey']; \r\n\r\nexport class GeoCode extends React.Component {\r\n\r\n\trandomLocationGenerator() {\r\n\t\tconsole.log(names.length);\r\n\r\n\t\tlet chooseName = names[Math.floor(Math.random()*39)];\r\n\t\tlet chooseSignX = Math.random()*2;\r\n\t\tlet chooseSignY = Math.random()*2;\r\n\t\tlet randX = Math.random()*360;\r\n\t\tlet randY = Math.random()*90-Math.random()*35;\r\n\r\n\t\tif(chooseSignX === 1) {\r\n\t\t\trandX *= -1;\r\n\t\t}\r\n\r\n\t\tif(chooseSignY === 0) {\r\n\t\t\trandY *= -1;\r\n\t\t}\r\n\r\n\t\tcoordinates.push({\r\n\t\t\tlongitude:randX,\r\n\t\t\tlatitude:randY,\r\n\t\t\tname:chooseName\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tgenerate(amount) {\r\n\t\tfor(let i = 0; i < amount; i++) {\r\n\t\t\tthis.randomLocationGenerator();\r\n\t\t}\r\n\t\treturn coordinates;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\r\n\t\t\t<MapContainer coordinates={this.generate(40)}/>\r\n\t\t)\r\n\t}\r\n};","import React, { Component } from 'react';\r\nimport {GeoCode} from './components/GoogleMaps/GeoCode';\r\nimport './App.css';\r\n\r\n//Place what will be rendered here\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n    \t<div>\r\n\t    \t<div className=\"title\">\r\n\t    \t\t<p>DragonFlyTracer</p>\r\n\t    \t\t<p className=\"sub\">The tweet location tracker</p>\r\n\t    \t</div>\r\n\t    \t<div className=\"google-maps\">\r\n\t    \t\t<GeoCode/>\r\n\t    \t</div>\r\n\t    \t<div className=\"description\">\r\n\t    \t\t<p>This Web Application was developed with <i>React.js</i>, \r\n\t    \t\twe provide our Google Maps user location placement feature through\r\n\t    \t\tthe <i>Google Maps API</i>. </p>\r\n\t    \t</div>\r\n\t    \t<div className=\"contributors\">\r\n\t    \t\t<p className=\"sub-title\">- A collaborative project between -</p>\r\n\t    \t\t<p>Rudy Flores | Tommy Bart | Sean | Hunter</p>\r\n\t    \t</div>\r\n    \t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}